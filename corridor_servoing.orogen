name "corridor_servoing"
version "0.1"

using_library "vfh_star"
using_library "envire"
using_library "asguard"
import_types_from "base"
import_types_from "vfh_star/DebugTypes.h"
import_types_from "corridor_servoing_types.hpp"

task_context "Task" do
    
    input_port("scan_samples", "base/samples/LaserScan").
	needs_reliable_connection.
        doc "LaserScann"

    input_port('odometry_samples', '/wrappers/samples/RigidBodyState').
	needs_reliable_connection.
	doc 'timestamped oodometry samples'

    input_port('heading', 'double').
	doc 'heading in NWU, where the robot should drive'

    output_port("segmented", "bool").
	doc "debug port for log replay"

    output_port("trajectory", "/std/vector</wrappers/Waypoint>")

    output_port("gridDump", "vfh_star/GridDump")

    output_port("vfhDebug", "wrappers/VFHStarDebugData")

    ##########################
    # aggregator parameters
    ##########################
    property('scan_period', 'double', 0.025).
	doc 'Time in s between laser scan readings'

    property('odometry_period', 'double', 0.01).
	doc 'Time in s between odometry readings'

    property('max_delay', 'double', 0.1).
	doc 'Time in s the map generator will wait for expected readings.'

    property('robot_width', 'double', 0.55).
	doc('The width of the robot')

    property('obstacle_safety_distance', 'double', 0.05).
	doc('The minimal distance, in which the robot will try to navigate around obstacles')

    needs_configuration
    port_driven 'scan_samples'
end


deployment "corridorTest" do
    cs	= task('corridor_servoing', "corridor_servoing::Task").
	triggered

    add_default_logger

    if !corba_enabled?
        browse cs
    end

end


